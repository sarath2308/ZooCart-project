<%-include("../../views/partials/admin/header.ejs")%>
<head>
    <head>
        <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
        <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
      </head>
      <br>
  <div class="d-flex mb-3 justify-content-end">
    <a href="#" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addBannerModal">+ Add Banner</a>

</div>
                 <!-- DataTable with user details -->
                 <table class="table" id="bannerTable">
                    <thead>
                      <tr>
                        <th scope="col">Image</th>
                        <th scope="col">Title</th>
                        <th scope="col">start Date</th>
                        <th scope="col">End Date</th>
                        <th scope="col">position</th>
                        <th scope="col">status</th>
                        <th scope="col">Delete</th>
                      </tr>
                    </thead>
                    <tbody>
                      <% data.forEach((banner) => { %>
                        <tr>
                          <td>
                            <div style="width: 100px; height: 100px; overflow: hidden; border: 1px solid #ddd; border-radius: 5px;">
                              <img src="<%= banner.image %>" alt="banner image" style="width: 100%; height: auto;">
                            </div>
                          </td>
                          
                          <td><%= banner.title %></td>
                          <td><%= new Date(banner.startDate).toLocaleDateString('en-GB') %></td>
                          <td><%= new Date(banner.endDate).toLocaleDateString('en-GB') %></td>
                          
                          <td><%=banner.position%></td>
                          <td><%if(banner.startDate<Date.now()&&banner.endDate>Date.now()){%>
                            <span style="color: rgb(0, 255, 51);">active</span>
                            <% } else { %>
                              <span style="color: rgb(211, 36, 16);">expired</span>
                            <% } %>
                        </td>
                          <td><button onclick="deleteBanner('<%=banner._id%>')" class="btn btn-danger">Delete</a>
                          <button class="btn btn-warning">Edit</button>
                        </td>
                            
                            
                        </tr>
                      <% }) %>
                    </tbody>
                  </table>
                  
      </div>
      <div class="modal fade" id="addBannerModal" tabindex="-1" aria-labelledby="eventModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="eventModalLabel">Add Banner</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                  <form method="post" id="eventForm" action="/admin/banners/add" enctype="multipart/form-data" onsubmit="return validateAndSubmitEvent()">

                    <!-- Title -->
                    <div class="mb-3">
                        <label for="eventTitle" class="form-label fw-bold">Title</label>
                        <input type="text" name="title" class="form-control" id="eventTitle" placeholder="Enter event title"  minlength="3" maxlength="100">
                    </div>
                
                    <!-- Product Selection Dropdown -->
                    <div class="mb-3">
                        <label for="productSelect" class="form-label fw-bold">Select Product</label>
                        <select name="productId" id="productSelect" class="form-select">
                          <option value="">Choose one product to redirect</option>
                            <% products.forEach(product => { %>
                                <option value="<%= product._id %>"><%= product.productName %></option>
                            <% }) %>
                        </select>
                    </div>
                
                    <!-- Banner Position Dropdown -->
                    <div class="mb-3">
                        <label for="bannerSelect" class="form-label fw-bold">Select Banner Position</label>
                        <select name="bannerPosition" id="bannerSelect" class="form-select">
                            <option value="1">Banner 1</option>
                            <option value="2">Banner 2</option>
                            <option value="3">Banner 3</option>
                            <option value="4">Banner 4</option>
                            <option value="5">Banner 5</option>
                        </select>
                    </div>
                
                    <!-- Start Date and End Date -->
                    <div class="row">
                        <div class="col-lg-6 mb-3">
                            <label for="startDate" class="form-label fw-bold">Start Date</label>
                            <input type="date" id="startDate" name="startDate" class="form-control border">
                        </div>
                        <div class="col-lg-6 mb-3">
                            <label for="endDate" class="form-label fw-bold">End Date</label>
                            <input type="date" name="endDate" class="form-control" id="endDate">
                        </div>
                    </div>
                
                    <!-- Image Upload with Cropping -->
                    <div class="card mb-4">
                        <div class="card-header bg-light">
                            <h6 class="mb-0">Upload Image</h6>
                        </div>
                        <div class="card-body text-center">
                            <img id="imagePreview" src="" alt="Uploaded Image" class="img-fluid rounded shadow-sm mb-3" style="max-width: 100%; display: none;">
                            <input class="form-control" type="file" name="image" id="imageInput" accept="image/png, image/jpeg">

                        </div>
                    </div>
                
                
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-success">Save Event</button>
                </div>
              </form>
            </div>
        </div>
    </div>
      
    <style>
        .table {
  border-collapse: separate;
  border-spacing: 0 15px;
  font-family: 'Poppins', sans-serif;
  font-size: 14px;
  background-color: #fff;
}

.table thead th {
  background:#2575fc ;
  color: white;
  padding: 12px;
  border: none;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.table tbody tr {
  background: #f4f6f9;
  transition: all 0.3s ease-in-out;
  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
}

.table tbody tr:hover {
  transform: translateY(-5px);
  box-shadow: 0px 6px 16px rgba(0, 0, 0, 0.15);
}

.table td {
  padding: 10px;
  border: none;
}

.btn {
  border-radius: 10px;
  padding: 5px 12px;
  font-size: 12px;
  text-transform: capitalize;
}
td{
    padding:10px;
}
.modal-header {
    border-bottom: none;
  }
  .modal-title {
    font-weight: bold;
    font-size: 1.5rem;
  }
  .form-label {
    font-size: 1rem;
  }
  .card-header {
    background-color: #f8f9fa;
    border-bottom: 1px solid #ddd;
  }
  .btn-close {
    background: none;
  }
  #cropButton {
    display: inline-block;
    padding: 5px 15px;
  }
  .cropped-image {
    border: 2px solid #ddd;
    padding: 5px;
    border-radius: 8px;
  }
    </style>
         <script>
$(document).ready(function () {
  $('#bannerTable').DataTable({
});
})


let cropper;

// Preview image when selected
function previewImage(event) {
    const reader = new FileReader();
    reader.onload = function() {
        const image = new Image();
        image.src = reader.result;

        image.onload = function() {
            document.getElementById('imagePreview').src = image.src;
            document.getElementById('imagePreview').style.display = 'block';
            document.getElementById('croppedImageContainer').style.display = 'none';

            // Initialize the cropper once the image is loaded
            if (cropper) {
                cropper.destroy();
            }
            cropper = new Cropper(image, {
                aspectRatio: 16 / 9, // Aspect ratio of the cropper
                viewMode: 1, // Restrict the crop box to the container
                responsive: true,
                autoCropArea: 0.8, // Initial crop area size
                cropBoxResizable: true,
                zoomable: true
            });
        };
    };
    reader.readAsDataURL(event.target.files[0]);
}

function validateAndSubmitEvent() {
    clearErrors(); // Clear previous error messages

    let isValid = true;

    // Title Validation
    const title = document.getElementById("eventTitle").value.trim();
    if (!title || title.length < 3 || title.length > 100) {
        displayError("eventTitle", "Title must be between 3 to 100 characters.");
        isValid = false;
    }

    // Date Validation
    const startDate = document.getElementById("startDate").value;
    const endDate = document.getElementById("endDate").value;
    const today = new Date().toISOString().split('T')[0];

    if (startDate && startDate < today) {
        displayError("startDate", "Start date cannot be in the past.");
        isValid = false;
    }

    if (endDate && endDate < startDate) {
        displayError("endDate", "End date must be after the start date.");
        isValid = false;
    }

    // Image Validation
    const imageInput = document.getElementById("imageInput");
    if (imageInput.files.length === 0) {
        displayError("imageInput", "Please upload an image.");
        isValid = false;
    } else {
        const file = imageInput.files[0];
        const allowedTypes = ['image/png', 'image/jpeg'];
        const maxSizeInBytes = 2 * 1024 * 1024; // 2MB limit

        if (!allowedTypes.includes(file.type)) {
            displayError("imageInput", "Only PNG and JPEG images are allowed.");
            isValid = false;
        }

        if (file.size > maxSizeInBytes) {
            displayError("imageInput", "Image size should not exceed 2MB.");
            isValid = false;
        }
    }

    // Prevent form submission if any validation fails
    if (!isValid) {
        return false;
    }

    return true;
}

// Function to Display Inline Error Messages
function displayError(fieldId, message) {
    const field = document.getElementById(fieldId);
    const errorElement = document.createElement('div');
    errorElement.className = "text-danger mt-1";
    errorElement.id = `${fieldId}-error`;
    errorElement.innerText = message;
    field.parentNode.appendChild(errorElement);
    field.classList.add("is-invalid"); // Bootstrap invalid class for highlighting
}

// Function to Clear Previous Errors
function clearErrors() {
    const errorElements = document.querySelectorAll('.text-danger');
    errorElements.forEach(element => element.remove());

    const invalidFields = document.querySelectorAll('.is-invalid');
    invalidFields.forEach(field => field.classList.remove("is-invalid"));
}


    // Function to Display Inline Error Messages
    function displayError(fieldId, message) {
        const field = document.getElementById(fieldId);
        const errorElement = document.createElement('div');
        errorElement.className = "text-danger mt-1";
        errorElement.id = `${fieldId}-error`;
        errorElement.innerText = message;
        field.parentNode.appendChild(errorElement);
        field.classList.add("is-invalid"); // Bootstrap invalid class for highlighting
    }

    // Function to Clear Previous Errors
    function clearErrors() {
        const errorElements = document.querySelectorAll('.text-danger');
        errorElements.forEach(element => element.remove());

        const invalidFields = document.querySelectorAll('.is-invalid');
        invalidFields.forEach(field => field.classList.remove("is-invalid"));
    }

    // Image Preview Function
    function previewImage(event) {
        const imagePreview = document.getElementById('imagePreview');
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                imagePreview.src = e.target.result;
                imagePreview.style.display = 'block';
            };
            reader.readAsDataURL(file);
        } else {
            imagePreview.style.display = 'none';
        }
    }

    // Image Preview Function
    function previewImage(event) {
        const imagePreview = document.getElementById('imagePreview');
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                imagePreview.src = e.target.result;
                imagePreview.style.display = 'block';
            };
            reader.readAsDataURL(file);
        } else {
            imagePreview.style.display = 'none';
        }
    }


document.addEventListener('DOMContentLoaded', function () {
    const startDate = document.getElementById('startDate');
    const endDate = document.getElementById('endDate');
    
    // Get today's date in YYYY-MM-DD format
    const today = new Date().toISOString().split('T')[0];

    // Set the 'min' attribute to today's date
    startDate.setAttribute('min', today);
    endDate.setAttribute('min', today);
});


const deleteBanner=(id)=>{
  console.log(id);
  
  const swalWithBootstrapButtons = Swal.mixin({
  customClass: {
    confirmButton: "btn btn-success",
    cancelButton: "btn btn-danger"
  },
  buttonsStyling: false
});
swalWithBootstrapButtons.fire({
  title: "Are you sure?",
  text: "You won't be able to revert this!",
  icon: "warning",
  showCancelButton: true,
  confirmButtonText: "Yes, delete it!",
  cancelButtonText: "No, cancel!",
  reverseButtons: true
}).then((result) => {
  if (result.isConfirmed) {

    $.ajax({
        url:`/admin/banners?id=${id}`,
        method:"DELETE",
        success:(response)=>
        {
            if(response.success)
                   {
                    swalWithBootstrapButtons.fire({
                       title: "Deleted!",
                       text: "Your file has been deleted.",
                       icon: "success"
                         }).then(()=>
                        {
                          location.reload()
                        })
                   }
                  },
                error:(response)=>
              {
                swal.fire({
                       title: "something went wrong!",
                       text: "Your file has been not deleted.",
                       icon: "warning"
                         });
              }})
  } else if (
    /* Read more about handling dismissals below */
    result.dismiss === Swal.DismissReason.cancel
  ) {
    swalWithBootstrapButtons.fire({
      title: "Cancelled",
      text: "Your imaginary file is safe :)",
      icon: "error"
    });
  }
});
}

</script>
<%-include("../../views/partials/admin/footer.ejs")%>